// Generated by CoffeeScript 1.3.3
(function() {
  var $, $window, Pullitup, ScrollableItem;

  $ = jQuery;

  $window = $(window);

  Pullitup = (function() {

    function Pullitup(container) {
      this.container = container;
      this.items = [];
      this.last_scroll_top = this.container.scrollTop();
      this.base_resolution = {
        width: this.container.width(),
        height: this.container.height()
      };
      this.scale = 1;
      this.bindAll();
      this.setScaleFromActualResolution();
    }

    Pullitup.prototype.bindAll = function() {
      var _this = this;
      this.container.on('scroll', function() {
        var direction, scrollTop;
        scrollTop = _this.container.scrollTop();
        direction = _this.last_scroll_top < scrollTop ? 'down' : 'up';
        _this.processScrollAt(scrollTop, direction);
        return _this.last_scroll_top = scrollTop;
      });
      return this.container.on('resize', function() {
        return _this.handleResize();
      });
    };

    Pullitup.prototype.listen = function(sel, opts) {
      return this.items.push(new ScrollableItem(sel, opts, this.scale, this.last_scroll_top, this.sizes));
    };

    Pullitup.prototype.processScrollAt = function(y) {
      return $.each(this.items, function(i, item) {
        return item.scrolledAt(y);
      });
    };

    Pullitup.prototype.handleResize = function() {
      var _this = this;
      this.setScaleFromActualResolution();
      $.each(this.items, function(i, item) {
        return item.resizeToScale(_this.scale, _this.sizes);
      });
      return this.container.trigger('scroll');
    };

    Pullitup.prototype.setBaseResolution = function(res) {
      this.base_resolution = res;
      return this.setScaleFromActualResolution();
    };

    Pullitup.prototype.setScaleFromActualResolution = function() {
      var actual_ratio, ah, aw, base_ratio, bh, bw, height, width, _ref, _ref1;
      _ref = [this.container.width(), this.container.height()], aw = _ref[0], ah = _ref[1];
      actual_ratio = aw / ah;
      _ref1 = [this.base_resolution.width, this.base_resolution.height], bw = _ref1[0], bh = _ref1[1];
      base_ratio = bw / bh;
      if (actual_ratio >= base_ratio) {
        width = aw;
        height = bh * (aw / bw);
      } else {
        width = bw * (ah / bh);
        height = aw;
      }
      this.scale = width / bw;
      return this.sizes = {
        width: this.base_resolution.width * this.scale,
        height: this.base_resolution.height * this.scale,
        offset: Math.max(aw - width, 0) / 2
      };
    };

    return Pullitup;

  })();

  ScrollableItem = (function() {

    function ScrollableItem(sel, params, scale, y, parent_sizes) {
      this.scale = scale;
      this.parent_sizes = parent_sizes;
      this.el = $(sel);
      this.fadeIn = params.start.fade;
      this.fadeOut = params.end.fade;
      this.easeMoveIn = params.start.easeMove;
      this.easeMoveOut = params.end.easeMove;
      this.inEasing = params.start.easing || 'linear';
      this.outEasing = params.end.easing || 'linear';
      this.params = params;
      this.last_params = null;
      this.sizes = {
        width: this.el.width(),
        height: this.el.height()
      };
      this.resizeToScale(this.scale, this.parent_sizes);
      this.processPositions();
      this.initPositionAt(y);
    }

    ScrollableItem.prototype.processPositions = function() {
      var bound, center, middle,
        _this = this;
      this.positions = {};
      $.each(this.params, function(key, hash) {
        var x, y;
        if (key === 'refObject' || key === 'onResize' || key === 'alwaysVisible') {
          return;
        }
        x = key === 'end' && !hash.x && hash.x !== 0 ? _this.params['start'].x : hash.x;
        y = key === 'end' && !hash.y && hash.y !== 0 ? _this.params['start'].y : hash.y;
        return _this.positions[key] = {
          bounds: typeof hash.bounds === 'number' ? _this.valueForPosition(hash.bounds) : $.map(hash.bounds, function(n) {
            return _this.valueForPosition(n);
          }),
          x: _this.valueForPosition(x) + _this.parent_sizes.offset,
          y: _this.valueForPosition(y)
        };
      });
      if (!this.positions.fixed) {
        bound = this.positions.end.bounds - ((this.positions.end.bounds - this.positions.start.bounds) / 2);
        center = this.positions.end.x - ((this.positions.end.x - this.positions.start.x) / 2);
        middle = this.positions.end.y - ((this.positions.end.y - this.positions.start.y) / 2);
        return this.positions.fixed = {
          bounds: [bound, bound],
          x: center,
          y: middle
        };
      }
    };

    ScrollableItem.prototype.initPositionAt = function(y) {
      this.visible = this.visibility(y);
      if (this.visible === 0) {
        this.el.fadeIn(0);
      } else {
        this.el.fadeOut(0);
      }
      this.el.css({
        position: 'fixed'
      });
      return this.scrolledAt(y);
    };

    ScrollableItem.prototype.valueForPosition = function(n) {
      var inset, pos, position, set, wh, ww, _ref;
      if (typeof n === 'number') {
        return n * this.scale;
      } else {
        _ref = n.split(' '), pos = _ref[0], set = _ref[1];
        inset = (set != null) && set === 'inset';
        position = (function() {
          switch (pos) {
            case 'left':
              if (inset) {
                return 0;
              } else {
                return -this.el.outerWidth();
              }
              break;
            case 'right':
              ww = this.parent_sizes.width;
              if (inset) {
                return ww - this.el.outerWidth();
              } else {
                return ww;
              }
              break;
            case 'top':
              if (inset) {
                return 0;
              } else {
                return -this.el.outerHeight();
              }
              break;
            case 'bottom':
              wh = this.parent_sizes.height;
              if (inset) {
                return wh - this.el.outerHeight();
              } else {
                return wh;
              }
              break;
            case 'center':
              return (this.parent_sizes.width - this.el.outerWidth()) / 2;
            case 'middle':
              return (this.parent_sizes.height - this.el.outerHeight()) / 2;
          }
        }).call(this);
        return position;
      }
    };

    ScrollableItem.prototype.scrolledAt = function(y, force) {
      var visibility;
      if (force == null) {
        force = false;
      }
      visibility = this.visibility(y);
      if (!visibility === 0 && !this.visible && !force) {
        return;
      }
      switch (visibility) {
        case -1:
          return this.animateTo({
            top: this.positions.start.y,
            left: this.positions.start.x
          }, false);
        case 1:
          return this.animateTo({
            top: this.positions.end.y,
            left: this.positions.end.x
          }, false);
        case 0:
          return this.animateTo(this.getAnimationParamsAt(y), true);
      }
    };

    ScrollableItem.prototype.visibility = function(y) {
      switch (false) {
        case !(y < this.positions.start.bounds):
          return -1;
        case !(y > this.positions.end.bounds):
          return 1;
        default:
          return 0;
      }
    };

    ScrollableItem.prototype.animateTo = function(params, visible) {
      if (params === this.last_params) {
        return;
      }
      this.last_params = params;
      this.el.stop().animate(params, 0);
      if (visible !== this.visible) {
        this.visible = visible;
        if (visible || this.params.alwaysVisible) {
          return this.el.fadeIn(0);
        } else {
          return this.el.fadeOut(0);
        }
      }
    };

    ScrollableItem.prototype.getAnimationParamsAt = function(y) {
      var ends_at, fixed_end, fixed_start, left, left_start, opacity, positions, ratio, starts_at, top, top_start;
      if (this.params.refObject) {
        positions = this.processPositionsFromRefObjectAt(y);
      } else {
        positions = this.positions;
      }
      fixed_start = positions.fixed.bounds[0];
      fixed_end = positions.fixed.bounds[1];
      starts_at = positions.start.bounds;
      ends_at = positions.end.bounds;
      if (y >= fixed_start && y <= fixed_end) {
        return {
          top: positions.fixed.y,
          left: positions.fixed.x,
          opacity: 1
        };
      } else if (y < fixed_start) {
        ratio = (y - starts_at) / (fixed_start - starts_at);
        top_start = positions.start.y;
        top = (ratio * positions.fixed.y - ratio * top_start) + top_start;
        left_start = positions.start.x;
        left = (ratio * positions.fixed.x - ratio * left_start) + left_start;
        if (this.easeMoveIn) {
          top = $.easing[this.inEasing](top, ratio, top_start, top - top_start, 1);
          left = $.easing[this.inEasing](left, ratio, left_start, left - left_start, 1);
        }
        if (this.fadeIn) {
          opacity = $.easing[this.inEasing](ratio, ratio, 1, ratio, 1);
        } else {
          opacity = 1;
        }
        return {
          top: top,
          left: left,
          opacity: this.fadeIn ? ratio : 1
        };
      } else {
        ratio = (y - fixed_end) / (ends_at - fixed_end);
        top_start = positions.fixed.y;
        left_start = positions.fixed.x;
        top = (ratio * positions.end.y - ratio * top_start) + top_start;
        left = (ratio * positions.end.x - ratio * left_start) + left_start;
        if (this.easeMoveOut) {
          top = $.easing[this.outEasing](top, ratio, top_start, top - top_start, 1);
          left = $.easing[this.outEasing](left, ratio, left_start, left - left_start, 1);
        }
        if (this.fadeOut) {
          opacity = 1 - (ratio * $.easing[this.outEasing](1 - ratio, ratio, 1, 1 - ratio, 1));
        } else {
          opacity = 1;
        }
        return {
          top: top,
          left: left,
          opacity: opacity
        };
      }
    };

    ScrollableItem.prototype.resizeToScale = function(scale, parent_sizes) {
      var h, w, _ref;
      this.scale = scale;
      this.parent_sizes = parent_sizes;
      _ref = [this.sizes.width * this.scale, this.sizes.height * this.scale], w = _ref[0], h = _ref[1];
      if ($.isFunction(this.params.onResize)) {
        this.params.onResize(this.el, w, h);
      }
      this.el.css({
        width: w,
        height: h
      });
      return this.processPositions();
    };

    ScrollableItem.prototype.processPositionsFromRefObjectAt = function(y) {
      var offsets, positions,
        _this = this;
      offsets = this.params.refObject.offset();
      positions = $.extend(true, {}, this.positions);
      $.each(this.positions, function(key, hash) {
        positions[key].x = hash.x + offsets.left;
        return positions[key].y = hash.y - (y - offsets.top);
      });
      return positions;
    };

    return ScrollableItem;

  })();

  $.fn.pullItUp = function(options, value, container) {
    var $container, is_setter, pullup;
    if (value == null) {
      value = null;
    }
    if (container == null) {
      container = $window;
    }
    is_setter = typeof options === 'string';
    $container = typeof container.jquery !== 'undefined' ? $(container) : container;
    pullup = $container.data('pullitup');
    if (!pullup) {
      pullup = new Pullitup($container);
      $container.data('pullitup', pullup);
    }
    if (is_setter && typeof pullup[options] !== 'undefined') {
      return pullup[options](value);
    } else {
      return this.each(function() {
        return pullup.listen(this, options);
      });
    }
  };

}).call(this);
